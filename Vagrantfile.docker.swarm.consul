# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure(2) do |config|
  config.vm.box = "ubuntu/trusty64"
  config.vm.network "private_network", type: "dhcp"
  config.trigger.before :destroy do
    `docker-machine status #{@machine.name}`
    if $?.exitstatus == 0
      run "docker-machine rm -y #{@machine.name}"
    end
  end
  config.vm.define "consul" do |consul|
    consul.vm.provision "trigger" do |trigger|
      trigger.fire do
        `docker-machine status #{@machine.name}`
        if $?.exitstatus != 0
          if @machine.provider_name == :virtualbox
            ip = `vagrant ssh #{@machine.name} -c "ip addr show dev eth1 | grep -w inet"`
                 .match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)[0]
            port = 22
          else
            ip = @machine.ssh_info[:host]
            port = @machine.ssh_info[:port]
          end

          run "docker-machine create -d generic \
              --generic-ip-address #{ip} \
              --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \
              --generic-ssh-port #{port} \
              --generic-ssh-user #{@machine.ssh_info[:username]} \
              #{@machine.name}"

          consul_config = `docker-machine config #{@machine.name}`
          run "docker #{consul_config} run --name consul -d \
                           --publish 8500:8500 \
                           --hostname consul \
                           progrium/consul -server -bootstrap"
        end
      end
    end
  end
  config.vm.define "master" do |master|
    master.vm.provision "trigger" do |trigger|
      trigger.fire do
        `docker-machine status #{@machine.name}`
        if $?.exitstatus != 0
          if @machine.provider_name == :virtualbox
            ip = `vagrant ssh #{@machine.name} -c "ip addr show dev eth1 | grep -w inet"`
                 .match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)[0]
            port = 22
          else
            ip = @machine.ssh_info[:host]
            port = @machine.ssh_info[:port]
          end

          consul_server_address  = `docker-machine ip consul`.chomp
          run "docker-machine create -d generic \
              --generic-ip-address #{ip} \
              --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \
              --generic-ssh-port #{port} \
              --generic-ssh-user #{@machine.ssh_info[:username]} \
              --swarm \
              --swarm-master \
              --swarm-discovery consul://#{consul_server_address}:8500 \
              --engine-opt cluster-store=consul://#{consul_server_address}:8500 \
              --engine-opt cluster-advertise=eth1:2376 \
              #{@machine.name}"
        end
      end
    end
  end
  config.vm.define "node" do |node|
    node.vm.provision "trigger" do |trigger|
      trigger.fire do
        `docker-machine status #{@machine.name}`
        if $?.exitstatus != 0
          if @machine.provider_name == :virtualbox
            ip = `vagrant ssh #{@machine.name} -c "ip addr show dev eth1 | grep -w inet"`
                 .match(/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/)[0]
            port = 22
          else
            ip = @machine.ssh_info[:host]
            port = @machine.ssh_info[:port]
          end

          consul_server_address  = `docker-machine ip consul`.chomp
          run "docker-machine create -d generic \
              --generic-ip-address #{ip} \
              --generic-ssh-key #{@machine.ssh_info[:private_key_path][0]} \
              --generic-ssh-port #{port} \
              --generic-ssh-user #{@machine.ssh_info[:username]} \
              --swarm \
              --swarm-discovery consul://#{consul_server_address}:8500 \
              --engine-opt cluster-store=consul://#{consul_server_address}:8500 \
              --engine-opt cluster-advertise=eth1:2376 \
              #{@machine.name}"
        end
      end
    end
  end
end
